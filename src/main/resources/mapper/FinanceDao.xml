<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dms.dao.FinanceDao">

    <resultMap id="FinanceMap" type="FinanceDto">
        <id property="id" column="finance_id"/>
        <result property="employeeId" column="employee_id"/>
        <result property="employeeName" column="employee_name"/>
        <result property="baseWage" column="base_wage"/>
        <result property="overtime" column="overtime"/>
        <result property="mealsSubsidy" column="meals_subsidy"/>
        <result property="secrecySubsidy" column="secrecy_subsidy"/>
        <result property="communicationFee" column="communication_fee"/>
        <result property="attendance" column="attendance"/>
        <result property="bonusCard" column="bonus_card"/>
        <result property="bonusCash" column="bonus_cash"/>
        <result property="workingAgeSubsidy" column="working_age_subsidy"/>
        <result property="performanceAppraisalCard" column="performance_appraisal_card"/>
        <result property="performanceAppraisalCash" column="performance_appraisal_cash"/>
        <result property="otherSubsidy" column="other_subsidy"/>
        <result property="exhibitionCharge" column="exhibition_charge"/>
        <result property="charge" column="charge"/>
        <result property="chargeComments" column="charge_comments"/>
        <result property="casualLeave" column="casual_leave"/>
        <result property="sickLeave" column="sick_leave"/>
        <result property="storageCharge" column="storage_charge"/>
        <result property="grossPay" column="gross_pay"/>
        <result property="medicalInsurance" column="medical_insurance"/>
        <result property="housingFund" column="housing_fund"/>
        <result property="beforeTaxSalary" column="before_tax_salary"/>
        <result property="personalIncomeTax" column="personal_income_tax"/>
        <result property="afterTaxSalary" column="after_tax_salary"/>
        <result property="alreadyCharge" column="already_charge" typeHandler="com.dms.handler.BooleanHandler"/>
        <result property="identityCardNumber" column="identity_card_number"/>
    </resultMap>

    <select id="getFinances" parameterType="FinanceFilterRequest" resultMap="FinanceMap">
        select t.eid as employee_id, t.name as employee_name, t.base_wage, t.overtime, t.meals_subsidy,
        t.secrecy_subsidy, t.communication_fee,
        t.fid as finance_id, t.month,
        t.attendance, t.bonus_card, t.bonus_cash, t.working_age_subsidy, t.performance_appraisal_card,
        t.performance_appraisal_cash,
        t.other_subsidy, t.exhibition_charge, t.charge,
        t.charge_comments, t.casual_leave, t.sick_leave,
        t.storage_charge, t.gross_pay, t.medical_insurance,
        t.housing_fund, t.before_tax_salary, t.personal_income_tax, t.after_tax_salary, t.already_charge,
        t.identity_card_number
        from (
        select e.id as eid, e.name, e.base_wage, e.overtime, e.meals_subsidy, e.secrecy_subsidy,
        e.communication_fee, e.working_age_subsidy, e.identity_card_number, f.id as fid, f.month, f.attendance,
        f.bonus_card, f.bonus_cash, f.performance_appraisal_card, f.performance_appraisal_cash,
        f.other_subsidy, f.exhibition_charge, f.charge,
        f.charge_comments, f.casual_leave, f.sick_leave,
        f.storage_charge, f.gross_pay, f.medical_insurance,
        f.housing_fund, f.before_tax_salary, f.personal_income_tax, f.after_tax_salary, f.already_charge,
        row_number() over (order by e.id) as rn from employee e left join finance f on e.id = f.employee_id and
        f."month" = #{month}
        <where>
            <if test="employeeName != null and employeeName != ''">
                <bind name="pattern" value="'%' + employeeName + '%'"/>
                e.name like #{pattern}
            </if>
        </where>
        ) t
        <where>
            <if test="end > 0">
                t.rn BETWEEN #{start} and #{end}
            </if>
        </where>
    </select>

    <insert id="saveFinance" parameterType="FinanceDto">
        insert into "finance" (created_on, employee_id, month, attendance, bonus_card, bonus_cash, performance_appraisal_card, performance_appraisal_cash,
         other_subsidy, exhibition_charge, charge, charge_comments, casual_leave, sick_leave, storage_charge,
         gross_pay, medical_insurance, housing_fund, before_tax_salary, personal_income_tax, after_tax_salary, already_charge)
        values (current_timestamp, #{employeeId}, #{month}, #{attendance}, #{bonusCard}, #{bonusCash}, #{performanceAppraisalCard}, #{performanceAppraisalCash},
         #{otherSubsidy}, #{exhibitionCharge}, #{charge}, #{chargeComments}, #{casualLeave}, #{sickLeave}, #{storageCharge},
         #{grossPay}, #{medicalInsurance}, #{housingFund}, #{beforeTaxSalary}, #{personalIncomeTax}, #{afterTaxSalary}, 1)
    </insert>

    <update id="updateFinance" parameterType="FinanceDto">
        update finance
        set attendance =  #{attendance},
            bonus_card = #{bonusCard},
            bonus_cash = #{bonusCash},
            performance_appraisal_card = #{performanceAppraisalCard},
            performance_appraisal_cash = #{performanceAppraisalCash},
            other_subsidy = #{otherSubsidy},
            exhibition_charge = #{exhibitionCharge},
            charge = #{charge},
            charge_comments = #{chargeComments},
            casual_leave = #{casualLeave},
            sick_leave = #{sickLeave},
            storage_charge = #{storageCharge},
            gross_pay = #{grossPay},
            medical_insurance = #{medicalInsurance},
            housing_fund = #{housingFund},
            before_tax_salary = #{beforeTaxSalary},
            personal_income_tax = #{personalIncomeTax},
            after_tax_salary = #{afterTaxSalary}
         where id = #{id}
    </update>

    <select id="getFinance" parameterType="FinanceDto">
        select f.id
          from finance f
        <where>
            <if test="employeeId != null and employeeId != ''">
                f.employee_id = #{employeeId}
            </if>

            <if test="month != null and month != ''">
                f.month like #{month}
            </if>
        </where>

    </select>

    <update id="updateFinanceCommission" parameterType="FinanceDto">
        update finance
           set bonus_card = bonus_card + #{bonusCard}
        <where>
             1 = 1
            <if test="employeeId != null and employeeId != ''">
               and employee_id = #{employeeId}
            </if>

            <if test="month != null and month != ''">
               and  month like #{month}
            </if>
        </where>
    </update>

</mapper>